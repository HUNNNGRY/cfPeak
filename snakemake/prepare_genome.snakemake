include: 'common.snakemake'

# genome_dir = config['genome_dir']
# rna_types = config['rna_types']
# rna_types_gencode = list(filter(lambda x: x not in ('rRNA', 'miRNA', 'piRNA', 'circRNA', 'spikein_long', 'spikein_small'), rna_types))

# aligner = config['aligner']
# use_longest_transcript = config['use_longest_transcript']
# star_sjdboverhang = config['star_sjdboverhang']

# def get_all_inputs(wildcards):
#     available_inputs = dict(
#         fasta_index=expand('{genome_dir}/fasta/genome.fa.fai', genome_dir=genome_dir),
#         extract_gtf=expand('{genome_dir}/gtf_by_biotype/{rna_type}.gtf',
#             genome_dir=genome_dir, rna_type=rna_types),
#         gtf_to_transcript_table=expand('{genome_dir}/transcript_table/{rna_type}.txt',
#             genome_dir=genome_dir, rna_type=rna_types + ['all']),
#         gtf_to_bed=expand('{genome_dir}/bed_by_biotype/{rna_type}.bed',
#             genome_dir=genome_dir, rna_type=rna_types),
#         gtf_longest_transcript=expand('{genome_dir}/gtf_longest_transcript/{rna_type}.gtf',
#             genome_dir=genome_dir, rna_type=rna_types),
#         rsem_index=expand(get_rsem_index(aligner),
#             genome_dir=genome_dir, aligner=aligner, rna_type=rna_types),
#         genome_index_bowtie2=expand('{genome_dir}/genome_index/bowtie2/genome.1.bt2',
#             genome_dir=genome_dir),
#         genome_index_star=expand('{genome_dir}/genome_index/star/SA',
#             genome_dir=genome_dir),
#         long_index_star=expand('{genome_dir}/long_index/star/Genome', genome_dir=genome_dir),
#         bowtie2_index=expand('{genome_dir}/index/bowtie2/{rna_type}.1.bt2',
#             genome_dir=genome_dir, rna_type=['circRNA', 'rRNA', 'miRNA', 'mature_miRNA']),
#         star_index=expand('{genome_dir}/index/star/{rna_type}/SA',
#             genome_dir=genome_dir, rna_type=['circRNA', 'rRNA', 'miRNA', 'mature_miRNA']),
#         chrom_sizes=expand('{genome_dir}/chrom_sizes/transcriptome', genome_dir=genome_dir),
#         chrom_sizes2=expand('{genome_dir}/chrom_sizes/transcriptome_genome', genome_dir=genome_dir)
#     )
#     del available_inputs['rsem_index']
#     available_inputs['long_index_star']
#     enabled_inputs = list(available_inputs.keys())
#     inputs = []
#     for key, l in available_inputs.items():
#         if key in enabled_inputs:
#             inputs += l
#     return inputs

# rule all:
#     input:
#         get_all_inputs

rule transcript_index_bowtie2:
    input:
        '{genome_dir}/fasta_newTxID/{rna_type}.fa'
    output:
        bt2_1='{genome_dir}/index/bowtie2/{rna_type}.1.bt2',
        bt2rev_1='{genome_dir}/index/bowtie2/{rna_type}.rev.1.bt2'
    params:
        output_prefix='{genome_dir}/index/bowtie2/{rna_type}'
    threads:
        config['threads_mapping']
    conda:
        "./envs/cfpeak.yml"
    shell:
        '''bowtie2-build --threads {threads} {input} {params.output_prefix}
        '''

# def get_rsem_index(aligner):
#     if aligner == 'star':
#         return '{genome_dir}/rsem_index/{aligner}/{rna_type}/rsem.transcripts.fa'
#     elif aligner == 'bowtie2':
#         return '{genome_dir}/rsem_index/{aligner}/{rna_type}.transcripts.fa'
#     else:
#         raise ValueError('unknown aligner: {}'.format(aligner))

# rule fasta_index:
#     input:
#         '{genome_dir}/fasta/genome.fa'
#     output:
#         '{genome_dir}/fasta/genome.fa.fai'
#     shell:
#         '''samtools faidx {input}
#         '''


# rule transcript_index_star:
#     input:
#         fasta='{genome_dir}/fasta/{rna_type}.fa',
#         fai='{genome_dir}/fasta/{rna_type}.fa.fai'
#     output:
#         Genome='{genome_dir}/index/star/{rna_type}/Genome',
#         SA='{genome_dir}/index/star/{rna_type}/SA'
#     params:
#         output_prefix='{genome_dir}/index/star/{rna_type}'
#     threads:
#         config['threads_mapping']
#     run:
#         from math import log2
#         # calculate star parameters
#         genome_length = 0
#         n_seqs = 0
#         with open(input.fai, 'r') as f:
#             for line in f:
#                 genome_length += int(line.split('\t')[1])
#                 n_seqs += 1
#         genomeSAindexNbases = min(14, int(log2(genome_length)//2) - 1)
#         genomeChrBinNbits = min(18, int(log2(genome_length/n_seqs)))

#         shell('''STAR --runThreadN {threads} \
#             --runMode genomeGenerate \
#             --genomeSAindexNbases {genomeSAindexNbases} \
#             --genomeDir {params.output_prefix} \
#             --genomeFastaFiles {input.fasta} \
#             --genomeChrBinNbits {genomeChrBinNbits}
#         ''')

# rule genome_index_bowtie2:
#     input:
#         '{genome_dir}/fasta/genome.fa'
#     output:
#         bt2_1='{genome_dir}/genome_index/bowtie2/genome.1.bt2',
#         bt2rev_1='{genome_dir}/genome_index/bowtie2/genome.rev.1.bt2'
#     params:
#         output_prefix='{genome_dir}/genome_index/bowtie2/genome'
#     threads:
#         config['threads']
#     shell:
#         '''bowtie2-build --threads {threads} {input} {params.output_prefix}
#         '''

# rule genome_index_star:
#     input:
#         '{genome_dir}/fasta/genome.fa'
#     output:
#         SA='{genome_dir}/genome_index/star/SA',
#         Genome='{genome_dir}/genome_index/star/Genome'
#     params:
#         output_prefix='{genome_dir}/genome_index/star/'
#     threads:
#         config['threads']
#     shell:
#         '''STAR --runMode genomeGenerate --runThreadN {threads} \
#             --genomeDir {params.output_prefix} --genomeFastaFiles {input} \
#         '''

# rule long_index_star:
#     input:
#         fasta='{genome_dir}/fasta/genome.fa',
#         gtf='{genome_dir}/gtf/long_RNA.gtf'
#     output:
#         SA='{genome_dir}/long_index/star/SA',
#         Genome='{genome_dir}/long_index/star/Genome'
#     params:
#         output_prefix='{genome_dir}/long_index/star/'
#     threads:
#         config['threads']
#     shell:
#         '''STAR --runMode genomeGenerate --runThreadN {threads} \
#             --genomeDir {params.output_prefix} --genomeFastaFiles {input.fasta} \
#             --sjdbGTFfile {input.gtf} --sjdbOverhang {star_sjdboverhang} \
#             --outFileNamePrefix {params.output_prefix}
#         '''

# rule rsem_index_bowtie2:
#     input:
#         fasta='{genome_dir}/fasta/genome.fa',
#         gtf=lambda wildcards: expand('{genome_dir}/{gtf}/{rna_type}.gtf',
#             genome_dir=wildcards.genome_dir, 
#             gtf={True: 'gtf_longest_transcript', False: 'gtf_by_biotype'}[use_longest_transcript],
#             rna_type=wildcards.rna_type)
#     output:
#         chrlist='{genome_dir}/rsem_index/{aligner}/{rna_type}.chrlist',
#         grp='{genome_dir}/rsem_index/{aligner}/{rna_type}.grp',
#         idx_fa='{genome_dir}/rsem_index/{aligner}/{rna_type}.idx.fa',
#         transcripts_fa='{genome_dir}/rsem_index/{aligner}/{rna_type}.transcripts.fa',
#         bt2_1='{genome_dir}/rsem_index/{aligner}/{rna_type}.1.bt2',
#         bt2_2='{genome_dir}/rsem_index/{aligner}/{rna_type}.2.bt2',
#         bt2_3='{genome_dir}/rsem_index/{aligner}/{rna_type}.3.bt2',
#         bt2_4='{genome_dir}/rsem_index/{aligner}/{rna_type}.4.bt2',
#         bt2_rev_1='{genome_dir}/rsem_index/{aligner}/{rna_type}.rev.1.bt2',
#         bt2_rev_2='{genome_dir}/rsem_index/{aligner}/{rna_type}.rev.2.bt2'
#     params:
#         output_prefix='{genome_dir}/rsem_index/{aligner}/{rna_type}'
#     wildcard_constraints:
#         aligner='bowtie2'
#     shell:
#         '''rsem-prepare-reference --gtf {input.gtf} --bowtie2 {input.fasta} {params.output_prefix}
#         '''

# rule rsem_index_star:
#     input:
#         fasta='{genome_dir}/fasta/genome.fa',
#         gtf=lambda wildcards: expand('{genome_dir}/{gtf}/{rna_type}.gtf',
#             genome_dir=wildcards.genome_dir, 
#             gtf={True: 'gtf_longest_transcript', False: 'gtf_by_biotype'}[use_longest_transcript],
#             rna_type=wildcards.rna_type)
#     output:
#         fa='{genome_dir}/rsem_index/{aligner}/{rna_type}/rsem.fa',
#         chrlist='{genome_dir}/rsem_index/{aligner}/{rna_type}/rsem.chrlist',
#         grp='{genome_dir}/rsem_index/{aligner}/{rna_type}/rsem.grp',
#         idx_fa='{genome_dir}/rsem_index/{aligner}/{rna_type}/rsem.idx.fa',
#         transcripts_fa='{genome_dir}/rsem_index/{aligner}/{rna_type}/rsem.transcripts.fa',
#         SA='{genome_dir}/rsem_index/{aligner}/{rna_type}/SA',
#         Genome='{genome_dir}/rsem_index/{aligner}/{rna_type}/Genome'
#     params:
#         output_prefix='{genome_dir}/rsem_index/{aligner}/{rna_type}/rsem'
#     wildcard_constraints:
#         aligner='star'
#     shell:
#         '''rsem-prepare-reference --gtf {input.gtf} --star {input.fasta} {params.output_prefix}
#         '''


# rule gtf_by_biotype:
#     input:
#         gencode='{genome_dir}/gtf/gencode.gtf',
#         tRNA='{genome_dir}/gtf/gencode_tRNA.gtf',
#         lncRNA='{genome_dir}/gtf/merged_lncRNA.gtf',
#         tucpRNA='{genome_dir}/gtf/mitranscriptome_tucp.gtf'
#     output:
#         '{genome_dir}/gtf_by_biotype/{rna_type}.gtf'
#     shell:
#         '''if [ "{wildcards.rna_type}" = "mRNA" ];then
#             grep 'gene_type "protein_coding"' {input.gencode} | grep -v Selenocysteine > {output}
#         elif [ "{wildcards.rna_type}" = "Y_RNA" ];then
#             grep 'gene_name "Y_RNA"' {input.gencode} > {output}
#         elif [ "{wildcards.rna_type}" = "srpRNA" ];then
#             grep 'gene_name "RN7SL' {input.gencode} > {output}
#         elif [ "{wildcards.rna_type}" = "tRNA" ];then 
#             cp {input.tRNA} {output}
#         elif [ "{wildcards.rna_type}" = "lncRNA" ];then
#             cp {input.lncRNA} {output}
#         elif [ "{wildcards.rna_type}" = "tucpRNA" ];then
#             cp {input.tucpRNA} {output}
#         elif [ "{wildcards.rna_type}" = "pseudogene" ];then
#             grep 'pseudogene' {input.gencode}
#         else
#             grep 'gene_type "{wildcards.rna_type}"' {input.gencode} > {output}
#         fi
#         '''

# rule gtf_to_transcript_table:
#     input:
#         '{genome_dir}/gtf_by_biotype/{rna_type}.gtf'
#     output:
#         '{genome_dir}/transcript_table/{rna_type}.txt'
#     wildcard_constraints:
#         rna_type='(?!all).*'
#     shell:
#         '''{bin_dir}/preprocess.py gtf_to_transcript_table --feature exon \
#             --gene-type {wildcards.rna_type} \
#             --transcript-type {wildcards.rna_type} \
#             -i {input} -o {output}
#         '''

# rule merge_transcript_table:
#     input:
#         lambda wildcards: expand('{genome_dir}/transcript_table/{rna_type}.txt',
#             genome_dir=wildcards.genome_dir, rna_type=rna_types)
#     output:
#         '{genome_dir}/transcript_table/all.txt'
#     shell:
#         '''cat {input} > {output}
#         '''

# rule gtf_to_bed:
#     input:
#         '{genome_dir}/gtf_by_biotype/{rna_type}.gtf'
#     output:
#         '{genome_dir}/bed_by_biotype/{rna_type}.bed'
#     shell:
#         '''gffread -E --bed -o {output} {input}
#         '''

# rule gtf_longest_transcript:
#     input:
#         '{genome_dir}/gtf_by_biotype/{rna_type}.gtf'
#     output:
#         '{genome_dir}/gtf_longest_transcript/{rna_type}.gtf'
#     shell:
#         '''{bin_dir}/preprocess.py extract_longest_transcript -i {input} -o {output}
#         '''

# rule extract_transcript_fasta:
#     input:
#         bed='{genome_dir}/bed_by_biotype/{rna_type}.bed',
#         fasta='{genome_dir}/fasta/genome.fa'
#     output:
#         fasta='{genome_dir}/fasta/{rna_type}.fa',
#         index='{genome_dir}/fasta/{rna_type}.fa.fai'
#     wildcard_constraints:
#         rna_type='(?!genome).*'
#     shell:
#         '''bedtools getfasta -s -bed {input.bed} -fa {input.fasta} -split -name \
#         | awk '{gsub(/\([+-]\)/,"");print}' > {output.fasta}
#         samtools faidx {output.fasta}
#         '''
# """
# rule transcript_sizes:
#     input:
#         '{genome_dir}/bed_by_biotype/{rna_type}.bed'
#     output:
#         '{genome_dir}/chrom_sizes/{rna_type}'
#     wildcard_constraints:
#         rna_type='(?!transcriptome$)(?!genome$).*'
#     shell:
#         '''awk 'BEGIN{{OFS="\t";FS="\t"}}{{split($11,a,",");s=0;for(i in a){{s += a[i]}}; print $4,s}}' {input} > {output}
#         '''
# """

# rule chrom_sizes:
#     input:
#         '{genome_dir}/fasta/{rna_type}.fa.fai'
#     output:
#         '{genome_dir}/chrom_sizes/{rna_type}'
#     wildcard_constraints:
#         rna_type='(?!transcriptome$)(?!genome$)(?!transcriptome_genome$).*'
#     shell:
#         '''cut -f1,2 {input} > {output}
#         '''

# rule merge_transcript_sizes:
#     input:
#         lambda wildcards: expand('{genome_dir}/chrom_sizes/{rna_type}',
#             genome_dir=wildcards.genome_dir, rna_type=rna_types)
#     output:
#         '{genome_dir}/chrom_sizes/transcriptome'
#     shell:
#         '''cat {input} > {output}
#         '''

# rule genome_chrom_sizes:
#     input:
#         '{genome_dir}/fasta/genome.fa.fai'
#     output:
#         '{genome_dir}/chrom_sizes/genome'
#     shell:
#         '''cut -f1-2 {input} > {output}
#         '''

# rule merge_transcriptome_genome_sizes:
#     input:
#         '{genome_dir}/chrom_sizes/transcriptome',
#         '{genome_dir}/chrom_sizes/genome'
#     output:
#         '{genome_dir}/chrom_sizes/transcriptome_genome'
#     shell:
#         '''cat {input} > {output}
#         '''