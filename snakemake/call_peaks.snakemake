shell.prefix('set -x;')
include: 'peak_common.snakemake'
# if(1>0):
#     include: 'peak_common.snakemake'
# else:
#     include: 



rule all:
    input:
        get_all_inputs

#/BioII/lulab_b/jinyunfan/anaconda3/envs/bioinfo_py36/bin/bowtie2 (version 2.3.5)
rule transcript_index:
    input:
        genome_dir+'/fasta_newTxID/{rna_type}.fa'
    output:
        bt2_1=genome_dir+'/index/bowtie2/{rna_type}.1.bt2',
        bt2rev_1=genome_dir+'/index/bowtie2/{rna_type}.rev.1.bt2'
    params:
        output_prefix=genome_dir+'/index/bowtie2/{rna_type}'
    threads:
        config['threads_mapping']
    conda:
        "./envs/cfpeak.yml"
    shell:
        '''bowtie2-build --threads {threads} {input} {params.output_prefix}
        '''

#sample reads into similar scale, sequentially map to + strand of tx (by JYF)
rule mapping_tx:
    input:
        # fastq = "output/{dataset}/trimmed/{sample_id}.fastq.gz"
        fastq = output_dir+"/trimmed/{sample_id}.fastq.gz",
        idx1 = [ genome_dir+"/index/bowtie2/" + rna_type + ".1.bt2" for rna_type in rna_types ],
        idx2 = [ genome_dir+"/index/bowtie2/" + rna_type + ".rev.1.bt2" for rna_type in rna_types ],
    output:
        [ output_dir+"/tbam/{sample_id}/bam/" + rna_type + ".bam" for rna_type in rna_types ],
        [ output_dir+"/tbam/{sample_id}/bam/" + rna_type + ".bam.bai" for rna_type in rna_types ],
        [ temp(output_dir+"/tbam/{sample_id}/unmapped/" + rna_type + ".fastq.gz") for rna_type in rna_types1 ],
        # output_dir+"/tbam/{sample_id}/unmapped/enhancer_rev.fastq.gz",
        output_dir+"/tbam/{sample_id}/unmapped/repeats_rev.fastq.gz",
    log:
        output_dir+'/tbam/{sample_id}/log/rule'
    threads: config['threads_mapping']
    params:
        tmpdir = temp_dir,
        seed = config['seed'],
        downsample_fq = config['downsample_fq'],
        min_fq_num = config['min_fq_num'],
        max_fq_num = config['max_fq_num'],
        tmp_fq = output_dir+"/tbam/{sample_id}/tmp.fastq.gz",        
    wildcard_constraints:
        rna_type='(?!merge).*'
        # sample_id='\w+'
    conda:
        "./envs/cfpeak.yml"
    shell:
        """
        (declare -i downsample_fq={params.downsample_fq}
        declare -i min_fq_num={params.min_fq_num}
        declare -i max_fq_num={params.max_fq_num}
        declare -i num=$((`seqkit stats --basename --tabular -j {threads} {input.fastq} | grep -v "file" | cut -f 4`))
        declare -i sub_num=$(($num*$downsample_fq/100))
        [ $num -lt $min_fq_num ] && sub_num=$(($num))
        [ $num -gt $min_fq_num -a $sub_num -lt $min_fq_num ] && sub_num=$(($min_fq_num))
        [ $sub_num -gt $max_fq_num ] && sub_num=$(($max_fq_num))
        echo "use fq num: $sub_num"
        
        if [ $sub_num -eq 0 ]; then echo "zero num of fq"; exit 1; fi
        
        seqtk sample -s {params.seed} \
            {input.fastq} $sub_num | pigz -c -p {threads} > {params.tmp_fq}

        export JOBLIB_TEMP_FOLDER={params.tmpdir}
        scripts/mapping.py \
            --fastq {params.tmp_fq} \
            --index-dir {genome_dir}/index/bowtie2 \
            --bam-dir {output_dir}/tbam/{wildcards.sample_id}/bam \
            --threads {threads} \
            --priority {priority} \
            --log-dir {output_dir}/tbam/{wildcards.sample_id}/log \
            --unmapped-dir {output_dir}/tbam/{wildcards.sample_id}/unmapped \
            --mode very-fast \
            --clip-mode end-to-end \
            --multimap-max 100 \
            )> {log} 2>&1
        rm {params.tmp_fq}
        """
#/BioII/lulab_b/liyu/software/anaconda3/bin/seqkit
#/BioII/lulab_b/baopengfei/anaconda3/bin/seqtk